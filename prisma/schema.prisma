// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "windows", "darwin", "darwin-arm64", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  sku      String    @unique @default(uuid())
  products Product[]
}

model Product {
  id             Int      @id @default(autoincrement())
  name           String
  sku            String   @unique
  price          Float
  description    String?
  isArchived     Boolean  @default(false)
  categoryId     Int
  category       Category @relation(fields: [categoryId], references: [id])
  modifierGroups ProductModifierGroup[]
  orderItems     OrderItem[]
}

model ModifierGroup {
  id                             Int      @id @default(autoincrement())
  name                           String
  minSelection                   Int      @default(0)
  selectionBudget                Int      @default(1)
  maxSelections                  Int?
  maxSelectionsSyncedToOptionCount Boolean  @default(false)
  allowRepeatedSelections        Boolean  @default(false)
  exactBudgetRequired            Boolean  @default(false)
  options                        ModifierOption[]
  products                       ProductModifierGroup[]
}

model ProductModifierGroup {
  id              Int           @id @default(autoincrement())
  displayOrder    Int
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int
  group           ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  modifierGroupId Int

  @@unique([productId, modifierGroupId])
}

model ModifierOption {
  id              Int                 @id @default(autoincrement())
  name            String
  priceAdjustment Float               @default(0)
  selectionCost   Int                 @default(1)
  modifierGroupId Int
  modifierGroup   ModifierGroup       @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  orderItems      OrderItemModifier[]
}

model Table {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  status String  @default("AVAILABLE")
  orders Order[]
}

model Order {
  id            Int         @id @default(autoincrement())
  status        String      @default("OPEN")
  orderType     String      @default("Dine-In")
  paymentMethod String?
  totalAmount   Float       @default(0)
  createdAt     DateTime    @default(now())
  tableId       Int?
  table         Table?      @relation(fields: [tableId], references: [id])
  items         OrderItem[]
  comment       String?     // NEW: Field for order-level comments
}

model OrderItem {
  id                 Int                 @id @default(autoincrement())
  quantity           Int
  priceAtTimeOfOrder Float
  orderId            Int
  order              Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId          Int
  product            Product             @relation(fields: [productId], references: [id])
  selectedModifiers  OrderItemModifier[]
  comment            String?             // NEW: Field for item-level comments
}

model OrderItemModifier {
  id               Int            @id @default(autoincrement())
  orderItemId      Int
  orderItem        OrderItem      @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  modifierOptionId Int
  modifierOption   ModifierOption @relation(fields: [modifierOptionId], references: [id], onDelete: Cascade)
  quantity         Int
  displayOrder     Int

  @@unique([orderItemId, modifierOptionId, displayOrder])
}