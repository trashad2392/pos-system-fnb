// src/main/handlers/categoryHandlers.js
const { ipcMain } = require('electron');
const { prisma, Prisma } = require('../../lib/db'); // Import Prisma namespace for error handling

function setupCategoryHandlers() {
  // --- MODIFIED: Include the related menu ---
  ipcMain.handle('get-categories', () =>
    prisma.category.findMany({
      orderBy: { name: 'asc' },
      include: {
        menu: true, // Include the menu data for each category
      },
    })
  );

  // --- MODIFIED: Require menuId when adding ---
  ipcMain.handle('add-category', async (e, { name, menuId }) => {
    if (!name || name.trim() === '') {
      throw new Error('Category name cannot be empty.');
    }
    if (!menuId) {
      throw new Error('Menu ID is required to add a category.');
    }

    try {
      return await prisma.category.create({
        data: {
          name: name.trim(),
          menuId: parseInt(menuId, 10),
          // sku is generated by default if not provided
        },
      });
    } catch (error) {
      // Handle potential unique constraint violation (name + menuId)
      if (
        error instanceof Prisma.PrismaClientKnownRequestError &&
        error.code === 'P2002'
      ) {
        throw new Error(
          `A category with this name already exists in the selected menu.`
        );
      }
      throw error; // Re-throw other errors
    }
  });

  // --- MODIFIED: Update category name (for now, disallow changing menuId) ---
  ipcMain.handle('update-category', async (e, { id, name }) => {
    if (!name || name.trim() === '') {
      throw new Error('Category name cannot be empty.');
    }

    try {
      return await prisma.category.update({
        where: { id: parseInt(id, 10) },
        data: { name: name.trim() },
      });
    } catch (error) {
      // Handle potential unique constraint violation if the name change conflicts
      if (
        error instanceof Prisma.PrismaClientKnownRequestError &&
        error.code === 'P2002'
      ) {
        throw new Error(
          `A category with this name already exists in the same menu.`
        );
      }
      throw error; // Re-throw other errors
    }
  });

  // --- UNCHANGED: Delete category logic remains the same (checks for products) ---
  ipcMain.handle('delete-category', async (e, id) => {
    const categoryId = parseInt(id, 10);
    const productCount = await prisma.product.count({
      where: { categoryId: categoryId },
    });
    if (productCount > 0) {
      throw new Error(
        `Cannot delete category because it still contains ${productCount} products. Please move or delete them first.`
      );
    }
    return prisma.category.delete({ where: { id: categoryId } });
  });
}

module.exports = { setupCategoryHandlers };