// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "windows", "darwin", "darwin-arm64", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./pos_v2.db"
}

// --- NEW: Permission Model ---
// This model will store all possible actions in the system.
model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique // e.g., "access_settings", "void_orders", "manage_inventory"
  roles Role[] @relation("RoleToPermission")
}

// --- NEW: Role Model ---
// This model defines a role and links it to multiple permissions.
model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique // e.g., "Cashier", "Shift Manager", "Admin"
  users       User[]
  permissions Permission[] @relation("RoleToPermission")
}

model Discount {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  type       String // "PERCENT" or "FIXED"
  value      Float
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  orderItems OrderItem[]
  orders     Order[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  sku      String    @unique @default(uuid())
  products Product[]
}

model Product {
  id             Int                    @id @default(autoincrement())
  name           String
  sku            String                 @unique
  price          Float
  image          String?
  description    String?
  isArchived     Boolean                @default(false)
  categoryId     Int
  category       Category               @relation(fields: [categoryId], references: [id])
  modifierGroups ProductModifierGroup[]
  orderItems     OrderItem[]
}

model ModifierGroup {
  id                             Int              @id @default(autoincrement())
  name                           String
  minSelection                   Int              @default(0)
  selectionBudget                Int              @default(1)
  maxSelections                  Int?
  maxSelectionsSyncedToOptionCount Boolean          @default(false)
  allowRepeatedSelections        Boolean          @default(false)
  exactBudgetRequired            Boolean          @default(false)
  options                        ModifierOption[]
  products                       ProductModifierGroup[]
}

model ProductModifierGroup {
  id              Int           @id @default(autoincrement())
  displayOrder    Int
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int
  group           ModifierGroup @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  modifierGroupId Int

  @@unique([productId, modifierGroupId])
}

model ModifierOption {
  id               Int                 @id @default(autoincrement())
  name             String
  priceAdjustment  Float               @default(0)
  selectionCost    Int                 @default(1)
  modifierGroupId  Int
  modifierGroup    ModifierGroup       @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  orderItems       OrderItemModifier[]
}

model Table {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  status String  @default("AVAILABLE")
  orders Order[]
}

model Order {
  id            Int         @id @default(autoincrement())
  status        String      @default("OPEN") // "OPEN", "PAID", "HOLD", "CLEARED", "VOIDED"
  orderType     String      @default("Dine-In")
  paymentMethod String?
  totalAmount   Float       @default(0)
  refundAmount  Float?      @default(0) // To track money returned
  createdAt     DateTime    @default(now())
  tableId       Int?
  table         Table?      @relation(fields: [tableId], references: [id])
  items         OrderItem[]
  comment       String?
  userId        Int?
  user          User?       @relation(fields: [userId], references: [id])
  payments      Payment[]
  discountId    Int?
  discount      Discount?   @relation(fields: [discountId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  method    String
  createdAt DateTime @default(now())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id                 Int                 @id @default(autoincrement())
  quantity           Int
  priceAtTimeOfOrder Float
  orderId            Int
  order              Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId          Int
  product            Product             @relation(fields: [productId], references: [id])
  selectedModifiers  OrderItemModifier[]
  comment            String?
  status             String              @default("ACTIVE") // "ACTIVE" or "VOIDED"
  voidedAt           DateTime?
  voidType           String? // "SHORT" or "LONG"
  discountId         Int?
  discount           Discount?           @relation(fields: [discountId], references: [id])
}

model OrderItemModifier {
  id               Int            @id @default(autoincrement())
  orderItemId      Int
  orderItem        OrderItem      @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  modifierOptionId Int
  modifierOption   ModifierOption @relation(fields: [modifierOptionId], references: [id], onDelete: Cascade)
  quantity         Int
  displayOrder     Int

  @@unique([orderItemId, modifierOptionId, displayOrder])
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  pin        String?
  // --- UPDATED: 'role' is now a relation to the Role model ---
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  hourlyRate Float?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  shifts     Shift[]
  orders     Order[]
}

model Shift {
  id       Int       @id @default(autoincrement())
  clockIn  DateTime  @default(now())
  clockOut DateTime?
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
}